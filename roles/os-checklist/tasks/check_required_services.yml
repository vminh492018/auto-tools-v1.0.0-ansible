---
- name: Checking services status.....
  block:
    - name: Check kdump service status
      ansible.builtin.command: systemctl is-active kdump
      register: kdump_status
      changed_when: false
      failed_when: false

    - name: Check sendmail service status
      ansible.builtin.command: systemctl is-active sendmail
      register: sendmail_status
      changed_when: false
      failed_when: false

    - name: Check postfix service status
      ansible.builtin.command: systemctl is-active postfix
      register: postfix_status
      changed_when: false
      failed_when: false

    - name: Check bluetooth service status
      ansible.builtin.command: systemctl is-active bluetooth
      register: bluetooth_status
      changed_when: false
      failed_when: false

    - name: Check CUPS service status
      ansible.builtin.command: systemctl is-active cups
      register: cups_status
      changed_when: false
      failed_when: false

    - name: Check MySQL service status
      ansible.builtin.shell: |
        mysql_check=$(ps -ef | grep mysql | grep -v '^root')
        if [ -z "$mysql_check" ]; then  
          echo "MySQL not active [PASS]"
          exit 0
        else
          echo -e "MySQL is active: $mysql_check [FAIL]"
          exit 1
        fi
      register: mysql_status
      ignore_errors: true

- name: Set facts after checking....
  block:
    - name: PASS if all services are in the desired state
      set_fact:
        check_required_services: "PASS"
      when: >
        kdump_status.stdout.strip() == 'active' and
        sendmail_status.stdout.strip() != 'active' and
        postfix_status.stdout.strip() != 'active' and
        bluetooth_status.stdout.strip() != 'active' and
        cups_status.stdout.strip() != 'active' and
        "MySQL not active [PASS]" in mysql_status.stdout

    - name: Build failed services list
      set_fact:
        failed_services: >-
          {{
            (['kdump'] if kdump_status.stdout.strip() != 'active' else []) +
            (['sendmail'] if sendmail_status.stdout.strip() == 'active' else []) +
            (['postfix'] if postfix_status.stdout.strip() == 'active' else []) +
            (['bluetooth'] if bluetooth_status.stdout.strip() == 'active' else []) +
            (['CUPS'] if cups_status.stdout.strip() == 'active' else []) +
            (['MySQL'] if "MySQL not active [PASS]" not in mysql_status.stdout else [])
          }}

    - name: FAIL if any service is not in the desired state
      set_fact:
        check_required_services: >-
          {{ "FAIL - " + (failed_services | join(', ')) }}
      when: failed_services | length > 0

- name: Detailed results are output after the checking process is finished....
  block:
    - name: kdump service status
      ansible.builtin.debug:
        msg: >-
          Kdump service is {{ 'active [PASS]' if kdump_status.stdout.strip() == 'active' else 'not active [FAIL]' }}

    - name: sendmail service status
      ansible.builtin.debug:
        msg: >-
          Sendmail service is {{ 'active [FAIL]' if sendmail_status.stdout.strip() == 'active' else 'not active [PASS]' }}

    - name: postfix service status
      ansible.builtin.debug:
        msg: >-
          Postfix service is {{ 'active [FAIL]' if postfix_status.stdout.strip() == 'active' else 'not active [PASS]' }}

    - name: bluetooth service status
      ansible.builtin.debug:
        msg: >-
          Bluetooth service is {{ 'active [FAIL]' if bluetooth_status.stdout.strip() == 'active' else 'not active [PASS]' }}

    - name: CUPS service status
      ansible.builtin.debug:
        msg: >-
          CUPS service is {{ 'active [FAIL]' if cups_status.stdout.strip() == 'active' else 'not active [PASS]' }}

    - name: MySQL status
      debug:
        msg: "{{ mysql_status.stdout }}"