---
- name: Check rsyslog.conf for cmdlog and iptables logs
  shell: |
    files=("/var/log/cmdlog.log" "/var/log/iptables/iptables.log")
    for file in "${files[@]}"; do
      if grep -v ^# /etc/rsyslog.conf | grep -qw "$file"; then
        echo "$file [PASS]"
      else
        echo "$file [FAIL]"
      fi
    done
  register: rsyslog_check
  ignore_errors: true
  args:
    executable: /bin/bash

- name: Display rsyslog configuration status for cmdlog and iptables logs
  debug:
    msg: "{{ rsyslog_check.stdout_lines }}"

- name: Check rsyslog.conf for cmdlog logging
  shell: |
    rsyslog_cmdlog_check=$(grep -v ^# /etc/rsyslog.conf | grep "local6" | grep "/var/log/cmdlog.log" | wc -l)
    if [[ $rsyslog_cmdlog_check == 0 ]]; then
      echo "rsyslog.conf not configured for cmd logging [FAIL]"
    elif [[ $rsyslog_cmdlog_check == 1 ]]; then
      echo "rsyslog.conf configured for cmd logging [PASS]"
    else
      echo "rsyslog.conf has duplicate cmd logging configuration [FAIL]"
    fi
  register: rsyslog_cmdlog_check
  ignore_errors: true
  args:
    executable: /bin/bash

- name: Set facts after checking.......
  block:
    - name: PASS if all entries are PASS
      set_fact:
        check_rsyslogconf: "PASS"
      when: >
        '[FAIL]' not in rsyslog_check.stdout and
        'rsyslog.conf configured for cmd logging [PASS]' in rsyslog_cmdlog_check.stdout

    - name: FAIL if any entry is FAIL
      set_fact:
        check_rsyslogconf: "FAIL"
      when: >
        '[FAIL]' in rsyslog_check.stdout or
        'rsyslog.conf not configured for cmd logging [FAIL]' in rsyslog_cmdlog_check.stdout or
        'rsyslog.conf has duplicate cmd logging configuration [FAIL]' in rsyslog_cmdlog_check.stdout

- name: Detailed results are output after the checking process is finished....
  debug:
    msg: "{{ rsyslog_cmdlog_check.stdout_lines }}"
